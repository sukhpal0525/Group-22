package org.aston.ecommerce.report;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.aston.ecommerce.order.Order;
import org.aston.ecommerce.order.OrderService;
import org.aston.ecommerce.product.Product;
import org.aston.ecommerce.product.ProductRepository;
import org.aston.ecommerce.product.ProductService;
import org.aston.ecommerce.user.CustomUserDetails;
import org.springframework.beans.factory.annotation.Autowired;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Date;

public class ReportGenerator {
    private final CustomUserDetails currUser;
    private final Font headerFont = new Font(Font.FontFamily.HELVETICA, 16);
    private final Font secondHeaderFont = new Font(Font.FontFamily.HELVETICA, 14);
    private final Font subFont = new Font(Font.FontFamily.HELVETICA, 11);
    private final Font subFontBold = new Font(Font.FontFamily.HELVETICA, 11, Font.BOLD);
    private final ProductService productService;
    private final OrderService orderService;

    public ReportGenerator(CustomUserDetails currUser, ProductService productService, OrderService orderService){
        this.currUser = currUser;
        this.productService = productService;
        this.orderService = orderService;
    }


    public void export(HttpServletResponse response) throws IOException, DocumentException {
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, response.getOutputStream());
        document.open();
        this.addMetaData(document);
        this.addContent(document);
        this.createStockLevelTable(document);
        this.createOrdersTable(document);
        document.close();
    }


    private void addContent(Document document) throws DocumentException {
        Paragraph preface = new Paragraph();
        // Empty line
        this.addEmptyLine(preface, 1);
        // Write the header
        preface.add(new Paragraph("PC Labs Admin Report", headerFont));
        this.addEmptyLine(preface, 1);
        preface.add(new Paragraph(
                "Report generated by: " + this.currUser.getActualUsernameNotEmail() + ", " + new Date(),
                subFontBold));

        document.add(preface);
    }

    private void createStockLevelTable(Document document) throws DocumentException {
        Paragraph stockPara = new Paragraph();
        // Empty line
        this.addEmptyLine(stockPara, 1);
        // Write the header
        stockPara.add(new Paragraph("Current Stock Level", headerFont));
        this.addEmptyLine(stockPara, 1);
        PdfPTable table = new PdfPTable(2);

        PdfPCell c1 = new PdfPCell(new Phrase("Name", subFontBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Stock Level", subFontBold));
        table.addCell(c1);

        for(Product product : this.productService.findAllProductsInAscendingOrder()){
            table.addCell(product.getName());
            table.addCell(product.getAmountAvailable().toString());
        }
        stockPara.add(table);
        document.add(stockPara);
    }

    public void createOrdersTable(Document document) throws DocumentException{
        Paragraph ordersPara = new Paragraph();
        // Empty line
        this.addEmptyLine(ordersPara, 1);
        // Write the header
        ordersPara.add(new Paragraph("Incoming and Outgoing Orders", headerFont));
        this.addEmptyLine(ordersPara, 1);
        float [] pointColumnWidths = {35F, 40F, 25F};
        PdfPTable table = new PdfPTable(pointColumnWidths);

        PdfPCell c1 = new PdfPCell(new Phrase("Transaction Number", subFontBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Order", subFontBold));
        table.addCell(c1);

        c1 = new PdfPCell(new Phrase("Status", subFontBold));
        table.addCell(c1);

        for(Order order: this.orderService.findAllIncomingAndOutgoingOrders()){
            table.addCell(order.getTransactionNumber());
            String orderDesc = "";
            for(int i = 0; i < order.getOrderItems().size(); i++){
                Order.OrderItem orderItem = order.getOrderItems().get(i);
                orderDesc += orderItem.getProduct().getName() + " " + "(x" + orderItem.getNumOfItems() + ")";
                orderDesc += i < (order.getOrderItems().size() - 1) ? ", " : "";
            }
            table.addCell(orderDesc);
            table.addCell(order.getStatus().toString());
        }
        ordersPara.add(table);
        document.add(ordersPara);
    }
    private void addMetaData(Document document){
        document.addTitle("PC Labs Admin Report");
        document.addSubject("Admin Report");
        document.addAuthor("Group 22");
        document.addCreator("Group 22");
    }

    private void addEmptyLine(Paragraph paragraph, int number) {
        for (int i = 0; i < number; i++) {
            paragraph.add(new Paragraph(" "));
        }
    }

}
